#!/bin/bash

mask2cidr ()
{
   # Assumes there's no "255." after a non-255 byte in the mask
   local x=${1##*255.}
   set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
   x=${1%%$3*}
   echo $(( $2 + (${#x}/4) ))
}

#
# Run the OpenVPN server normally
#
# Determine which iptables command to use
export IPTABLES_CMD=iptables
if [ "$NFT_TABLES" == 1 ]; then
  IPTABLES_CMD=iptables-nft
fi

if [ "$DEBUG" == "1" ]; then
  set -x
fi

set -e

cd $OPENVPN

# Build runtime arguments array based on environment
USER_ARGS=("${@}")
ARGS=()

# Checks if ARGS already contains the given value
function hasArg {
    local element
    for element in "${@:2}"; do
        [ "${element}" == "${1}" ] && return 0
    done
    return 1
}

# Adds the given argument if it's not already specified.
function addArg {
    local arg="${1}"
    [ $# -ge 1 ] && local val="${2}"
    if ! hasArg "${arg}" "${USER_ARGS[@]}"; then
        ARGS+=("${arg}")
        [ $# -ge 1 ] && ARGS+=("${val}")
    fi
}

# set up iptables rules and routing
# this allows rules/routing to be altered by supplying this function
# in an included file, such as ovpn_env.sh
function setupIptablesAndRouting {
    $IPTABLES_CMD -t nat -C POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE 2>/dev/null || {
      $IPTABLES_CMD -t nat -A POSTROUTING -s $OVPN_SERVER -o $OVPN_NATDEVICE -j MASQUERADE
    }
    for i in "${OVPN_ROUTES[@]}"; do
        $IPTABLES_CMD -t nat -C POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE 2>/dev/null || {
          $IPTABLES_CMD -t nat -A POSTROUTING -s "$i" -o $OVPN_NATDEVICE -j MASQUERADE
        }
    done
}

addArg "--config" "$OPENVPN/openvpn.conf"

source "$OPENVPN/ovpn_env.sh"

mkdir -p /dev/net
if [ ! -c /dev/net/tun ]; then
    mknod /dev/net/tun c 10 200
fi

if [ $OVPN_DEVICE == "tap" ]; then
    if [ $(ip link show | grep -c $OVPN_DEVICE$OVPN_DEVICEN:) -eq 0 ]; then
        openvpn --mktun --dev $OVPN_DEVICE$OVPN_DEVICEN
    fi
    
    ip link set $OVPN_DEVICE$OVPN_DEVICEN up
    echo 'Setting up bridge'
    # clear initial situation
    echo "" > /tmp/initial_situation
    # check if bridge already exists; create if not
    if [ $(ip link show | grep -c $OVPN_BR_BR:) -eq 0 ]; then
        echo "ip link add name $OVPN_BR_BR type bridge"
        ip link add name $OVPN_BR_BR type bridge
        echo "ip link set dev $OVPN_BR_BR up"
        ip link set dev $OVPN_BR_BR up

        echo 'setting IP, subnet and broadcast address for bridge'
        OVPN_BR_CIDR=$(mask2cidr $OVPN_BR_ETH_SUBNET)
        echo "ip addr add $OVPN_BR_ETH_IP/$OVPN_BR_CIDR brd + dev $OVPN_BR_BR"
        ip addr add $OVPN_BR_ETH_IP/$OVPN_BR_CIDR brd + dev $OVPN_BR_BR

        echo 'setting mac address for bridge'
        ip link set $OVPN_BR_BR address $OVPN_BR_ETH_MAC
    else
        # Remember the bridge alread existed at startup
        echo "bridge exists" >> /tmp/initial_situation
        echo "bridge $OVPN_BR_BR already exists"
    fi
    
    # check if $OVPN_BR_ETH_IF is already added to bridge; add if not
    if [ $(brctl show $OVPN_BR_BR | grep -c $OVPN_BR_ETH_IF) -eq 0 ]; then
        echo "ip link set $OVPN_BR_ETH_IF master $OVPN_BR_BR"
        ip link set $OVPN_BR_ETH_IF master $OVPN_BR_BR
    else
        # Remember the interface was already part of the bridge at startup
        echo "if belongs to bridge" >> /tmp/initial_situation
        echo "interface $OVPN_BR_ETH_IF is already part of bridge $OVPN_BR_BR"
    fi
    
    # check if openvpn device is already added to bridge; add if not
    if [ $(brctl show $OVPN_BR_BR | grep -c $OVPN_DEVICE$OVPN_DEVICEN) -eq 0 ]; then
        echo "ip link set $OVPN_DEVICE$OVPN_DEVICEN master $OVPN_BR_BR"
        ip link set $OVPN_DEVICE$OVPN_DEVICEN master $OVPN_BR_BR
    fi
    
    #echo 'setting tap device to promiscous mode'
    #ifconfig $OVPN_DEVICE$OVPN_DEVICEN 0.0.0.0 promisc up
    ## check if interface is already in promiscous mode
    #if [ $(ip link show | grep "$OVPN_BR_ETH_IF:.*PROMISC.*") -eq 0 ]; then
    #    echo 'setting eth device to promiscous mode'
    #    ifconfig $OVPN_BR_ETH_IF 0.0.0.0 promisc up
    #else
    #    # Remember interface was already in promiscous mode
    #    echo "if is promisc" >> /tmp/initial_situation
    #fi

    # Add default route if eth is also gateway port
    echo 'checking if default gateway needs to be added for bridge'
    if [ $(ip route | grep -c "default via $OVPN_BR_ETH_GATEWAY dev $OVPN_BR_BR") -eq 0 ]; then
        ip route add default via $OVPN_BR_ETH_GATEWAY dev $OVPN_BR_BR
    fi
    
    echo 'setting up IPTABLES'
    # check if entry already exists before adding
    if [ $($IPTABLES_CMD -S | grep -c -- "-A INPUT -i $OVPN_DEVICE$OVPN_DEVICEN -j ACCEPT") -eq 0 ]; then
       
       $IPTABLES_CMD -A INPUT -i $OVPN_DEVICE$OVPN_DEVICEN -j ACCEPT
    fi
    if [ $($IPTABLES_CMD -S | grep -c -- "-A INPUT -i $OVPN_BR_BR -j ACCEPT") -eq 0 ]; then
        $IPTABLES_CMD -A INPUT -i $OVPN_BR_BR -j ACCEPT
    else
        echo "br input role exists" >> /tmp/initial_situation
    fi

    if [ $($IPTABLES_CMD -S | grep -c -- "-A FORWARD -i $OVPN_BR_BR -j ACCEPT") -eq 0 ]; then
        $IPTABLES_CMD -A FORWARD -i $OVPN_BR_BR -j ACCEPT
    else
        echo "br forward role exists" >> /tmp/initial_situation
    fi
fi

if [ -d "$OPENVPN/ccd" ]; then
    addArg "--client-config-dir" "$OPENVPN/ccd"
fi

# When using --net=host, use this to specify nat device.
[ -z "$OVPN_NATDEVICE" ] && OVPN_NATDEVICE=eth0

# Setup NAT forwarding if requested
if [ "$OVPN_DEFROUTE" != "0" ] || [ "$OVPN_NAT" == "1" ] ; then
    # call function to setup iptables rules and routing
    # this allows rules to be customized by supplying
    # a replacement function in, for example, ovpn_env.sh
    setupIptablesAndRouting
fi

# Use a copy of crl.pem as the CRL Needs to be readable by the user/group
# OpenVPN is running as.  Only pass arguments to OpenVPN if it's found.
if [ "$EASYRSA_PKI/crl.pem" -nt "$OPENVPN/crl.pem" ]; then
    cp -f "$EASYRSA_PKI/crl.pem" "$OPENVPN/crl.pem"
    chmod 644 "$OPENVPN/crl.pem"
fi

if [ -r "$OPENVPN/crl.pem" ]; then
    addArg "--crl-verify" "$OPENVPN/crl.pem"
fi

ip -6 route show default 2>/dev/null
if [ $? = 0 ]; then
    echo "Checking IPv6 Forwarding"
    if [ "$(</proc/sys/net/ipv6/conf/all/disable_ipv6)" != "0" ]; then
        echo "Sysctl error for disable_ipv6, please run docker with '--sysctl net.ipv6.conf.all.disable_ipv6=0'"
    fi

    if [ "$(</proc/sys/net/ipv6/conf/default/forwarding)" != "1" ]; then
        echo "Sysctl error for default forwarding, please run docker with '--sysctl net.ipv6.conf.default.forwarding=1'"
    fi

    if [ "$(</proc/sys/net/ipv6/conf/all/forwarding)" != "1" ]; then
        echo "Sysctl error for all forwarding, please run docker with '--sysctl net.ipv6.conf.all.forwarding=1'"
    fi
fi

#Define cleanup procedure
cleanup() 
{
    if [ $OVPN_DEVICE == "tap" ]; then
        
        
        echo 'Stopping OpenVPN'
        OVPN_PID=$(pgrep openvpn)
        killall openvpn
        # Wait for shutdown complete
        while $(kill -0 $OVPN_PID 2>/dev/null); do
            sleep 1
        done
        
        if [ -z "$(grep "br input role exists" /tmp/initial_situation)" ]; then
            echo "Removing bridge INPUT rule"
            $IPTABLES_CMD -D INPUT -i $OVPN_BR_BR -j ACCEPT
        fi
        
        if [ -z "$(grep "br forward role exists" /tmp/initial_situation)" ]; then
            echo "Removing bridge FORWARD rule"
            $IPTABLES_CMD -D FORWARD -i $OVPN_BR_BR -j ACCEPT
        fi
        
        # Remove physical interface from the bridge if it did not belong to the bridge at startup
        if [ -z "$(grep "if belongs to bridge" /tmp/initial_situation)" ]; then
            # Remove eth device from bridge
            ip link set $OVPN_BR_ETH_IF nomaster
        fi
        
        echo 'Removing tap device from bridge'
        # Remove OpenVPN device from bridge
        ip link set $OVPN_DEVICE$OVPN_DEVICEN nomaster

        if [ -z "$(grep "bridge exists" /tmp/initial_situation)" ]; then
            echo 'Shuttdown down bridge'
            ip link set $OVPN_BR_BR down

            echo 'Deleting bridge'
            if [ $(ip link show | grep -c $OVPN_BR_BR:) -eq 1 ]; then
                ip link delete $OVPN_BR_BR type bridge
            fi
        fi

        if [ -z "$(grep "if belongs to bridge" /tmp/initial_situation)" ]; then
            #echo 'setting IP, subnet and broadcast address for physical device'
            #OVPN_BR_CIDR=$(mask2cidr $OVPN_BR_ETH_SUBNET)
            #ip addr add $OVPN_BR_ETH_IP/$OVPN_BR_CIDR brd + dev $OVPN_BR_ETH_IF

            echo 'checking if default gateway needs to be added for pyhsical device'
            if [ $(ip route | grep -c "default via $OVPN_BR_ETH_GATEWAY dev $OVPN_BR_ETH_IF") -eq 0 ]; then
                ip route add default via $OVPN_BR_ETH_GATEWAY dev $OVPN_BR_ETH_IF
            fi
        fi

        echo 'Removing tap device'
        if [ $(ip link show | grep -c $OVPN_DEVICE$OVPN_DEVICEN:) -eq 1 ]; then
            ip link set $OVPN_DEVICE$OVPN_DEVICEN down
            openvpn --rmtun --dev $OVPN_DEVICE$OVPN_DEVICEN
        fi
        
        $IPTABLES_CMD -D INPUT -i $OVPN_DEVICE$OVPN_DEVICEN -j ACCEPT
    fi
}

#Trap SIGTERM for bridge cleanup
trap 'cleanup' SIGTERM

#Run OpenVPN
echo "Running 'openvpn ${ARGS[@]} ${USER_ARGS[@]}'"
exec openvpn ${ARGS[@]} ${USER_ARGS[@]} &

#Wait
wait $!

